# ------------      -------    --------    -----------    -----------
# @File       : 5.4.3 神奇的素数实验模板.py    
# @Contact    : vasp@qq.com
# @Copyright  : 2018-2025, Wuhan University of Technology
# @Modify Time: 2021/4/27 9:55
# @Author     : 赵广辉
# @Version    : 1.0
# @License    : 仅限用于Python程序设计基础实践教程(赵广辉,高等教育出版社)配套实验
# ------------      -------    --------    -----------    -----------

def question_judge(question):
    """接收一个字符串为参数，根据参数值判断问题类型，调用合适的函数进行操作。"""
    if question == '素数':       # 如果输入”素数“，再输入一个正整数n，输出不大于n的所有素数
        n = int(input())
        output_prime(n)          # 输出素数
    elif question == '回文素数':
        n = int(input())
        palindromic_prime(n)     # 输出回文素数
    elif question == '反素数':
        n = int(input())
        reverse_prime(n)          # 输出反素数
    elif question == '哥德巴赫猜想':
        n = int(input())
        goldbach_conjecture(n)
    else:
        print('输入错误')


def print_prime():
    """无参函数，输入一个正整数n，判定这个数是否为素数。
    当n为素数时输出'是素数'，否则输出'不是素数'
    """
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================


def is_prime_normal(n):   # 判断素数的函数，一般方法
    """判断素数的函数,接收一个正整数为参数，参数是素数时返回True，否则返回False。
    # >>> is_prime_normal(5)
    # True
    # >>> is_prime_normal(10)
    # False
    """
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================


def is_prime(n):
    """判断素数的函数,接收一个正整数为参数，参数是素数时返回True，否则返回False
    减小判定区间，减少循环次数，提升效率。
    # >>> is_prime(5)
    # True
    # >>> is_prime(10)
    # False
    """
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================


def output_prime(number):
    """接收一个正整数为参数，遍历从0到number之间的所有整数，
    在一行中输出不大于number的所有素数，函数无返回值。
    # >>> output_prime(50)
    # 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47
    """
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================


def palindromic(num):
    """接收一个数字为参数，判定其是否为回文数，返回布尔值。
    # >>> palindromic(123)
    # False
    # >>> palindromic(12321)
    # True
    """
    if str(num) == str(num)[::-1]:
        return True
    else:
        return False


def palindromic_prime(number):
    """接收一个正整数参数number，遍历从0到number之间的所有整数，
    若某个数是素数，且转为字符串后是回文字符串，则称其是回文素数。
    找出并在同一行中从小到大输出小于number的所有回文素数，每个输出后加一个空格，
    函数无返回值。
    # >>> palindromic_prime(200)
    # 2 3 5 7 11 101 131 151 181 191
    """
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================

def reverse_num(num):
    """接收一个整数，返回其逆序字符串对应的整数。
    # >>> reverse_num(123)
    # 321
    """
    return int(str(num)[::-1])


def reverse_prime(number):
    """接收一个正整数参数，找出并在同一行内输出所有小于number的反素数，数字间用一个空格分隔。
    反素数指某数i及其逆序数都是素数，但数i对应的字符串不是回文字符串，函数无返回值。
    # >>> reverse_prime(200)
    # 13 17 31 37 71 73 79 97 107 113 149 157 167 179 199
    """
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================



def goldbach_conjecture(num):
    """ 哥德巴赫猜想, 接收一个不小于4的正整数为参数。
    当参数为不小于4的偶数时，将其分解为两个素数的加和，按小数+数的格式输出。
    有多种组合时全部输出，但不输出重复的组合，例如输出8=3+5，不输出8=5+3。
    参数为奇数或小于4时，输出'Data error!'
    # >>> goldbach_conjecture(3)
    # 'Data error!'
    # >>> goldbach_conjecture(3)
    # '20=3+17'
    # '20=7+13'
    """
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================


if __name__ == '__main__':
    problems = input()
    question_judge(problems)