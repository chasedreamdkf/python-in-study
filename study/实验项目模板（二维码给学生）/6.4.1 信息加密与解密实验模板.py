# ------------      -------    --------    -----------    -----------
# @File       : 6.4.1 信息加密与解密实验模板.py    
# @Contact    : vasp@qq.com
# @Copyright  : 2018-2025, Wuhan University of Technology
# @Modify Time: 2021/4/27 11:05
# @Author     : 赵广辉
# @Version    : 1.0
# @License    : 仅限用于Python程序设计基础实践教程(赵广辉,高等教育出版社)配套实验
# ------------      -------    --------    -----------    -----------

import string


def judge(method, text):
    """
    @ 参数 method  字符串，值为'恺撒加密'、'恺撒解密'、'维吉尼亚加密'、'维吉尼亚解密'、'摩斯密码加密'
    @ 参数 text 字符串，可为明文也可以是密文
    接收一个字符串method为参数，根据参数值调用不同函数实现对文本的加密和解密。
    method 值为 '恺撒加密'时，再输入一个单词做为密钥发生器，用于计算偏移量，对文件中的内容进行加密并输出。
    method 值为 '恺撒解密'时，再输入一个明文单词做为匹配词，用于计算偏移量，对文件中的内容进行解密并输出。
    method 值为 '维吉尼亚加密'时，再输入一个明文单词做为密钥，用于计算偏移量，对文件中的内容进行加密并输出。
    method 值为 '维吉尼亚解密'时，再输入一个明文单词做为密钥，用于计算偏移量，对文件中的内容进行解密并输出。
    method 值为 '摩斯密码加密'时，直接对文件中的内容进行加密并输出。
    若为其他输入，输出'输入错误'。
    """
    if method == '恺撒加密':
        key = input()                        # 输入一个用于计算偏移量的单词
        offset = cal_offset(key)             # 计算偏移量
        print(caesar_cipher(text, offset))   # 加密
    elif method == '恺撒解密':
        key = input()  # 输入一个明文中存在的单词
        offset = find_offset(key, text)      # 计算偏移量
        print(caesar_decrypt(text, offset))  # 解密
    elif method == '维吉尼亚加密':
        keys = input("请输入密钥: ").upper()
        print(vigenere_encryption(text, keys))
    elif method == '维吉尼亚解密':
        keys = input("请输入密钥: ").upper()
        print(vigenere_decrypt(text, keys))
    elif method == '摩斯密码加密':
        print(morse_code_encryption(text))
    else:
        print('输入错误')


def read_txt(file):
    """接收文件名为参数，读取文件中的内容为一个字符串，返回这个字符串。"""
    with open(file, 'r') as temp:
        return temp.read()


def caesar_cipher(text, offset):
    """接收一个字符串为参数，采用字母表和数字中后面第offset个字符代替当前字符的方法
    对字符串中的字母和数字进行替换，实现加密效果，返回值为加密的字符串。
    例如：2019 abc 替换为5342 def """
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================


def caesar_decrypt(text, offset):
    """接收一个加密的字符串text和一个整数offset为参数，采用字母表和数字中前面第offset个字符
    代替当前字符的方法对字符串中的字母和数字进行替换，实现解密效果，返回值为解密的字符串。"""
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================


def cal_offset(key_word):
    """接收一个单词为参数，计算这个单词的每个字母的ASCII值的和，
    再对9取模，结果作为偏移量offset，返回这个偏移量。"""
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================


def find_offset(key_text, ciphertext):
    """接收一个明文单词和一个加密字符串为参数，尝试用[0,8]之间的数为偏移量进行解密。
    若解密结果中包含这个明文单词，说明当前正在尝试的偏移量就是加密时所用偏移量，返回
    这个整数偏移量。
    """
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================


def vigenere_encryption(text, key):
    """接收明文字符串和密钥字符串为参数，返回加密后的字符串.
    加密时字母和数字以外的其他字符原样输出。
    数字加密时，根据对应的密钥字符在字母表中的偏移量对9取模得到数字的偏移量。
    例如当前数字为1，对应的密钥字母是R,R的偏移量是17，对9取模为8，
    1 1 2 3 4 5 6 7 8 9 0 这行中序号为8的数字是9，加密结果即为9"""
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================


def vigenere_decrypt(text, key):
    """接收密文字符串和密钥字符串为参数，返回解密后的字符串.
    解密时字母和数字以外的其他字符原样输出。"""
    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================

def morse_code_encryption(text):
    """接收一个字符串文本，用摩斯密码对文本中的字符进行加密，返回加密后的文本。
    题目保证文本中仅包含西文字符。
    """
    ls = (".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---",
          ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..")

    # =======================================================
    # 此处去掉注释符号“#”并补充你的代码

    # =======================================================


if __name__ == '__main__':
    task = input()            # 输入加解密的方法
    filename = input()        # 输入需要加密或解密的文件名
    txt = read_txt(filename)  # 读取文件中的文本
    judge(task, txt)          # 根据输入的加解密方法调用对应函数对txt进行加密或解密
